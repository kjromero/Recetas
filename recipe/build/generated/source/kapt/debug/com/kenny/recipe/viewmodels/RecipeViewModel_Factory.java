// Generated by Dagger (https://dagger.dev).
package com.kenny.recipe.viewmodels;

import com.kenny.recipe.entities.data.Recipe;
import com.kenny.recipe.interfaces.SingleUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.List;
import javax.inject.Provider;
import kotlin.Unit;

@ScopeMetadata
@QualifierMetadata("com.kenny.recipe.entities.qualifiers.GetRecipes")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipeViewModel_Factory implements Factory<RecipeViewModel> {
  private final Provider<SingleUseCase<Unit, List<Recipe>>> getFeedItemUseCaseProvider;

  public RecipeViewModel_Factory(
      Provider<SingleUseCase<Unit, List<Recipe>>> getFeedItemUseCaseProvider) {
    this.getFeedItemUseCaseProvider = getFeedItemUseCaseProvider;
  }

  @Override
  public RecipeViewModel get() {
    return newInstance(getFeedItemUseCaseProvider.get());
  }

  public static RecipeViewModel_Factory create(
      Provider<SingleUseCase<Unit, List<Recipe>>> getFeedItemUseCaseProvider) {
    return new RecipeViewModel_Factory(getFeedItemUseCaseProvider);
  }

  public static RecipeViewModel newInstance(SingleUseCase<Unit, List<Recipe>> getFeedItemUseCase) {
    return new RecipeViewModel(getFeedItemUseCase);
  }
}
