// Generated by Dagger (https://dagger.dev).
package com.kenny.recipe.viewmodels;

import com.kenny.core.usecase.SingleUseCase;
import com.kenny.core.usecase.UseCase;
import com.kenny.recipe.entities.data.Recipes;
import com.kenny.recipe.uimodels.RecipesUiModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlin.Unit;

@ScopeMetadata
@QualifierMetadata({
    "com.kenny.recipe.entities.qualifiers.GetRecipes",
    "com.kenny.recipe.entities.qualifiers.MapRecipesDataToRecipeUiModel"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipeViewModel_Factory implements Factory<RecipeViewModel> {
  private final Provider<SingleUseCase<Unit, Recipes>> getRecipesUseCaseProvider;

  private final Provider<UseCase<Recipes, RecipesUiModel>> mapRecipesDataToRecipesUiModelProvider;

  public RecipeViewModel_Factory(Provider<SingleUseCase<Unit, Recipes>> getRecipesUseCaseProvider,
      Provider<UseCase<Recipes, RecipesUiModel>> mapRecipesDataToRecipesUiModelProvider) {
    this.getRecipesUseCaseProvider = getRecipesUseCaseProvider;
    this.mapRecipesDataToRecipesUiModelProvider = mapRecipesDataToRecipesUiModelProvider;
  }

  @Override
  public RecipeViewModel get() {
    return newInstance(getRecipesUseCaseProvider.get(), mapRecipesDataToRecipesUiModelProvider.get());
  }

  public static RecipeViewModel_Factory create(
      Provider<SingleUseCase<Unit, Recipes>> getRecipesUseCaseProvider,
      Provider<UseCase<Recipes, RecipesUiModel>> mapRecipesDataToRecipesUiModelProvider) {
    return new RecipeViewModel_Factory(getRecipesUseCaseProvider, mapRecipesDataToRecipesUiModelProvider);
  }

  public static RecipeViewModel newInstance(SingleUseCase<Unit, Recipes> getRecipesUseCase,
      UseCase<Recipes, RecipesUiModel> mapRecipesDataToRecipesUiModel) {
    return new RecipeViewModel(getRecipesUseCase, mapRecipesDataToRecipesUiModel);
  }
}
